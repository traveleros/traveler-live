#!/bin/sh
# Initial script for TravelerOS Live Kit
# Adapted for Ventoy, Rufus, Etcher, UNetbootin, and others
# Author: Tomas M <http://www.linux-live.org/>
# Modified by: [Adrian E]

export PATH=.:/:/usr/sbin:/usr/bin:/sbin:/bin

. /lib/config
. /lib/livekitlib

transfer_initramfs

MEMORY=/memory
CHANGES=$MEMORY/changes
UNION=$MEMORY/union
DATAMNT=$MEMORY/data
BUNDLES=$MEMORY/bundles

header "TravelerOS Live Kit init <https://bit.ly/travelerwebsite>"

# =================================================================
# Environment Detection Functions
# =================================================================

# Detect if running in Ventoy environment
is_ventoy() {
   if [ -f "/ventoy/version" ]; then
      return 0
   else
      return 1
   fi
}

# Detect if running in Rufus/Etcher/UNetbootin environment
is_extracted_iso() {
   if [ -f "/syslinux.cfg" ] || [ -f "/isolinux/isolinux.cfg" ] || [ -f "/boot/grub/grub.cfg" ]; then
      return 0
   else
      return 1
   fi
}

# Detect if running from a raw ISO image
is_raw_iso() {
   if grep -q "iso9660" /proc/mounts; then
      return 0
   else
      return 1
   fi
}

# Initialize environment
init_environment() {
   if is_ventoy; then
      echo "Running in Ventoy environment"
      ENVIRONMENT="ventoy"
   elif is_extracted_iso; then
      echo "Running in extracted ISO environment (Rufus/Etcher/UNetbootin)"
      ENVIRONMENT="extracted_iso"
   elif is_raw_iso; then
      echo "Running in raw ISO environment"
      ENVIRONMENT="raw_iso"
   else
      echo "Unknown environment"
      exit 1
   fi
}

# =================================================================
# Initialization Functions
# =================================================================

init_proc_sysfs

debug_start
debug_shell

# Load some modules manually first, then modprobe everything we have
init_devs
init_aufs
init_zram

# Modprobe all devices excluding network drivers
modprobe_everything -v /drivers/net/

# Initialize blkid cache file
init_blkid_cache

# Find data directory with filesystem bundles
DATA="$(find_data 45 "$DATAMNT")"
check_data_found "$DATA"
debug_shell

# Setup persistent changes, if possible
persistent_changes "$DATA" "$CHANGES"
debug_shell

# Copy to RAM if needed
DATA="$(copy_to_ram "$DATA" "$CHANGES")"

# Mount bundles
mount_bundles "$DATA" "$BUNDLES"
debug_shell

# Init aufs union, or setup overlayfs union
init_union "$CHANGES" "$UNION" "$BUNDLES"

# Add data to aufs union
union_append_bundles "$BUNDLES" "$UNION"
debug_shell

# Rootcopy
copy_rootcopy_content "$DATA" "$UNION"

# Create fstab
fstab_create "$UNION" "$DATAMNT"
debug_shell

# Run user custom preinit
user_preinit "$DATA" "$UNION"

header "Live Kit done, starting $LIVEKITNAME"
change_root "$UNION"

header "!!ERROR occurred, you shouldn't be here.!! Well, now that your here for some reason, how is your day going?"
/bin/sh

# =================================================================
# Environment-Specific Logic
# =================================================================

# Handle environment-specific tasks
case "$ENVIRONMENT" in
   ventoy)
      # Ventoy-specific logic
      echo "Handling Ventoy-specific tasks..."
      ;;
   extracted_iso)
      # Extracted ISO logic
      echo "Handling extracted ISO tasks..."
      ;;
   raw_iso)
      # Raw ISO logic
      echo "Handling raw ISO tasks..."
      ;;
   *)
      echo "Unsupported environment"
      exit 1
      ;;
esac

# =================================================================
# Additional Enhancements
# =================================================================

# Network Initialization
init_network() {
   echo "Initializing network settings..."
   init_network_dev
   init_network_ip
}

# Filesystem Initialization
init_filesystem() {
   echo "Initializing filesystem..."
   mkdir -p /proc /sys /etc $MEMORY
   mount -n -t proc proc /proc
   mount -n -t sysfs sysfs /sys
   mount -n -o remount,rw rootfs /
   ln -sf /proc/mounts /etc/mtab
}

# Debugging Enhancements
debug_shell() {
   if [ "$DEBUG_IS_ENABLED" ]; then
      echo "Debugging shell activated. Type commands or press Ctrl+D to continue booting."
      setsid sh -c 'exec sh < /dev/tty1 >/dev/tty1 2>&1'
   fi
}

# Persistent Changes
persistent_changes() {
   echo "Setting up persistent changes..."
   # Logic for persistent changes remains unchanged
}

# =================================================================
# Main Execution
# =================================================================

main() {
   init_environment
   init_network
   init_filesystem

   # Execute environment-specific logic
   case "$ENVIRONMENT" in
      ventoy)
         echo "Running in Ventoy environment"
         ;;
      extracted_iso)
         echo "Running in extracted ISO environment"
         ;;
      raw_iso)
         echo "Running in raw ISO environment"
         ;;
      *)
         echo "Unknown environment"
         exit 1
         ;;
   esac

   echo "Initialization complete. Proceeding to boot."
}

main "$@"


header "!!ERROR occured, you shouldn't be here.!! Now that your here for some strange reason, how is your day going?"
/bin/sh
