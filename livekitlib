#!/bin/sh

# Functions library :: Adapted for Ventoy, Rufus, Etcher, UNetbootin, and others
# Author: Tomas M. (Original), Modified for Multi-Tool Compatibility by [Adrian E]

# =================================================================
# Debug and output functions
# =================================================================

debug_start() {
   if grep -q debug /proc/cmdline 2>/dev/null; then
      DEBUG_IS_ENABLED=1
      set -x
   else
      DEBUG_IS_ENABLED=
   fi
}

debug_log() {
   if [ "$DEBUG_IS_ENABLED" ]; then
      echo "- debug: $*" >&2
   fi
   log "- debug: $*"
}

log() {
   echo "$@" 2>/dev/null >>/var/log/livedbg
}

# =================================================================
# Ensure /proc and /sys are mounted
# =================================================================

init_proc_sysfs() {
   echo "Initializing /proc and /sys filesystems..."
   mkdir -p /proc /sys /etc
   mount -t proc proc /proc 2>/dev/null || echo "Warning: /proc already mounted or unavailable."
   mount -t sysfs sysfs /sys 2>/dev/null || echo "Warning: /sys already mounted or unavailable."
   ln -sf /proc/mounts /etc/mtab
}

# =================================================================
# Environment Detection Functions
# =================================================================

# Detect if running in Ventoy environment
is_ventoy() {
   if [ -f "/ventoy/version" ]; then
      return 0
   else
      return 1
   fi
}

# Detect if running in extracted ISO environment (Rufus/Etcher/UNetbootin)
is_extracted_iso() {
   if [ -f "/syslinux.cfg" ] || [ -f "/isolinux/isolinux.cfg" ] || [ -f "/boot/grub/grub.cfg" ]; then
      return 0
   else
      return 1
   fi
}

# Detect if running from a raw ISO image
is_raw_iso() {
   if grep -q "iso9660" /proc/mounts 2>/dev/null; then
      return 0
   else
      return 1
   fi
}

# =================================================================
# ISO Handling Functions
# =================================================================

# Mount ISO using loopback (for Ventoy or raw ISO environments)
mount_iso() {
   local ISO_PATH="$1"
   local MOUNT_POINT="$2"

   if [ ! -f "$ISO_PATH" ]; then
      echo "ISO file not found: $ISO_PATH"
      return 1
   fi

   mkdir -p "$MOUNT_POINT"
   mount -o loop "$ISO_PATH" "$MOUNT_POINT"
   if [ $? -ne 0 ]; then
      echo "Failed to mount ISO: $ISO_PATH"
      return 1
   fi

   echo "Mounted ISO: $ISO_PATH at $MOUNT_POINT"
   return 0
}

# Unmount ISO
unmount_iso() {
   local MOUNT_POINT="$1"
   umount "$MOUNT_POINT"
   if [ $? -ne 0 ]; then
      echo "Failed to unmount: $MOUNT_POINT"
      return 1
   fi

   echo "Unmounted: $MOUNT_POINT"
   return 0
}

# =================================================================
# Initialization Functions
# =================================================================

# Initialize environment
init_environment() {
   if is_ventoy; then
      echo "Running in Ventoy environment"
      ENVIRONMENT="ventoy"
   elif is_extracted_iso; then
      echo "Running in extracted ISO environment (Rufus/Etcher/UNetbootin)"
      ENVIRONMENT="extracted_iso"
   elif is_raw_iso; then
      echo "Running in raw ISO environment"
      ENVIRONMENT="raw_iso"
   else
      echo "Unknown environment"
      exit 1
   fi
}

# Initialize network settings
init_network() {
   echo "Initializing network settings..."
   # Add network initialization logic here
   # This could include DHCP setup, static IP configuration, etc.
}

# Initialize filesystem
init_filesystem() {
   echo "Initializing filesystem..."
   mkdir -p /memory /mnt /tmp
}

# =================================================================
# Main Function
# =================================================================

main() {
   # Ensure /proc and /sys are mounted
   init_proc_sysfs

   # Initialize environment
   init_environment

   # Initialize network and filesystem
   init_network
   init_filesystem

   # Example: Handle environment-specific logic
   case "$ENVIRONMENT" in
      ventoy)
         # Ventoy-specific logic
         ISO_PATH="/ventoy/TravelerOS-2-Zippy-amd64.iso"
         MOUNT_POINT="/mnt/iso"
         CHANGES_DIR="/ventoy/changes"
         TARGET_DIR="/mnt/changes"

         mount_iso "$ISO_PATH" "$MOUNT_POINT"
         persistent_changes "$CHANGES_DIR" "$TARGET_DIR"
         ;;
      extracted_iso)
         # Extracted ISO logic
         echo "Booting from extracted ISO files"
         # Additional logic for extracted ISO environments can be added here
         ;;
      raw_iso)
         # Raw ISO logic
         echo "Booting from raw ISO image"
         # Additional logic for raw ISO environments can be added here
         ;;
      *)
         echo "Unsupported environment"
         exit 1
         ;;
   esac

   # Additional common logic for all environments can be added here
   echo "Boot process completed successfully."
}

# Execute the main function
main "$@"


# Execute the main function
main "$@"
